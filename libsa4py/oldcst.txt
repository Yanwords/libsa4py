class TypeAnnotatingProjects:
    """
    It applies the inferred type annotations to the input dataset
    """

    def __init__(self, projects_path: str, output_path: str, apply_nlp: bool = True):
        self.projects_path = projects_path
        self.output_path = output_path
        self.apply_nlp = apply_nlp

    def process_project(self, proj_json_path: str):
        proj_json = load_json(proj_json_path)
        print("proj json : ......")
        for p in proj_json.keys():
            for i, (f, f_d) in enumerate(proj_json[p]["src_files"].items()):
                file_path = p.replace("\\", "/")
                print(file_path)
                f = f.split(".", 1)[1]
                print(join(file_path, f))
                f_read = read_file(join(file_path, f))
                print(f_read)
                if len(f_read) != 0:
                    try:
                        f_parsed = cst.parse_module(f_read)
                        try:
                            f_parsed = cst.metadata.MetadataWrapper(f_parsed).visit(
                                TypeApplier(f_d, self.apply_nlp)
                            )
                            write_file(f_read, f_parsed.code)
                        except KeyError as ke:
                            print(
                                f"A variable not found | project {proj_json_path} | file {f}",
                                ke,
                            )
                            traceback.print_exc()
                        except TypeError as te:
                            print(f"Project {proj_json_path} | file {f}", te)
                            traceback.print_exc()
                    except cst._exceptions.ParserSyntaxError as pse:
                        print(f"Can't parsed file {f} in project {proj_json_path}", pse)

    def run(self, jobs: int):
        proj_jsons = list_files(join(self.output_path, "processed_projects"), ".json")
        if platform == "win32":
            # print("currently running on a windows machine")
            proj_jsons = [file.replace("\\", "/") for file in proj_jsons]
        proj_jsons.sort(key=lambda f: os.stat(f).st_size, reverse=True)
        ParallelExecutor(n_jobs=jobs)(total=len(proj_jsons))(
            delayed(self.process_project)(p_j) for p_j in proj_jsons
        )